<?php
namespace Rbac\Controller;
use Rbac\Model\RbacRepository;
use Rbac\Model\RbacRepositoryInterface;
use Rbac\Service\AuthAdapter;
use Rbac\Service\AuthManager;
use Laminas\Authentication\AuthenticationService;
use Laminas\Authentication\Result;
use Laminas\Mvc\Controller\AbstractActionController;
use Laminas\Stdlib\RequestInterface as Request;
use Laminas\Stdlib\ResponseInterface as Response;
use Laminas\View\Model\JsonModel;
use Laminas\View\Model\ViewModel;
use Laminas\Session\Container;
use Laminas\Uri\Uri;

class IndexController extends AbstractActionController{

    protected $authAdapter;
    protected $sessionContainer;
    protected  $authenticationService;
    protected $authManager;
    //public function __construct(AuthAdapter $authAdapter , Container $sessionContainer ) {
    //public function __construct(AuthenticationService $authenticationService  , Container $sessionContainer ) {
    public function __construct(AuthManager $authManager  , Container $sessionContainer ) {
        //$this->authenticationService = $authenticationService;
        $this->authManager = $authManager;
        $this->sessionContainer = $sessionContainer;
        //$this->authAdapter = $this->authenticationService->getAdapter();
        //$this->sessionContainer = $this->authenticationService->getStorage();
    }

    /*
    public function dispatch(Request $request, Response $response = null)
    {
        return parent::dispatch($request, $response); // TODO: Change the autogenerated stub
    }
    */

    public function heartBeatAction(){
        $view = new JsonModel();
        $view->setVariable('error',false);
        return $view;
    }

    public function indexAction(){
        $this->layout()->setTemplate('layout/login');
        return new ViewModel();

    }

    public function aksesAction(){
        $view =  new ViewModel();
        return $view;
    }

    public function loginAction()
    {
        $this->layout()->setTemplate('layout/login');
        return new ViewModel();
    }

    public function logoutAction()
    {
        $this->authManager->logout();
        $view =  new ViewModel();
        $view->setTerminal(true);
        return $this->redirect()->toRoute('login');
    }

    public function authenticateAction(){

        $response = [
            'error' => 1,
            'messages' => 'Error'];

        //udah pernah login g usah login lagi
        if($this->authManager->hasIdentity()){
            $data = [
                'error' => 0,
                'messages' => 'Already Login',
                'identity'=>$this->authManager->getIdentity()];
            $response = $this->getResponse();
            //$response->setStatusCode(304); // << PENTING STATUS INI
            $response->setContent(json_encode($data));
            return $response;
        }


        // Retrieve the redirect URL (if passed). We will redirect the user to this
        // URL after successfull login.
        $redirectUrl = (string)$this->params()->fromQuery('redirectUrl', '');
        if (strlen($redirectUrl)>2048) {
            throw new \Exception("Too long redirectUrl argument passed");
        }

        $username = $this->params()->fromPost('username', '_def');
        $password = $this->params()->fromPost('password', '_def');

        // Perform login attempt.
        $result = $this->authManager->login($username,
            $password, null );

        // Check result.
        if ($result->getCode() == Result::SUCCESS) {

            //var_dump($this->authManager->hasIdentity().'cuk');exit;    

            //save ke session
            //TODO
            // Get redirect URL.
            $redirectUrl = $this->params()->fromPost('redirect_url', '');

            if (!empty($redirectUrl)) {
                // The below check is to prevent possible redirect attack
                // (if someone tries to redirect user to another domain).
                $uri = new Uri($redirectUrl);
                if (!$uri->isValid() || $uri->getHost()!=null)
                    throw new \Exception('Incorrect redirect URL: ' . $redirectUrl);
            }

            // If redirect URL is provided, redirect the user to that URL;
            // otherwise redirect to Home page.
            if(empty($redirectUrl)) {
                //return $this->redirect()->toRoute('home');
            } else {
                //$this->redirect()->toUrl($redirectUrl);
            }
        } else {
            $isLoginError = true;
        }

        $data['result'] = $result->getIdentity();
        $data['error'] = $result->isValid() ? 0 : 1 ;
        $data['messages'] = $result->getMessages();

        


        $cookie_name = "-";
        $cookie_value = "-";

        $response = $this->getResponse();
        if($data['error']){
            $response->setStatusCode(401); // << PENTING STATUS INI
        }
        $response->setContent(json_encode($data));
        return $response;

        //setcookie($cookie_name, $cookie_value, time() + (86400 * 30), "/"); // 86400 = 1 day
        //header("Content-type:application/json");
        //echo json_encode(  $data );
        exit();
    }

    /**
     * Displays the "Not Authorized" page.
     */
    public function notAuthorizedAction()
    {
        $this->getResponse()->setStatusCode(403);

        return new ViewModel();
    }

    public function tesAction()
    {
        $v = new JsonModel();
        $u = $this->authManager->getUser();
        //$v->setVariable('u',$u);
        //$p = password_hash('a123',PASSWORD_DEFAULT);
        //$xx= '$2y$10$niU9NwN.mDeLhcHgZ41.teJqqi2iUtl.kpDLOJpDG6J1wRQUpNP2i';
        //$pv = password_verify('a123',$xx);

        //$v->setVariable('v',$pv);
        $v->setVariable('u',$u);
        return $v;
    }
}
