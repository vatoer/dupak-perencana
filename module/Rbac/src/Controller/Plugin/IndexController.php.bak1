<?php
namespace Rbac\Controller;
use Rbac\Model\RbacRepository;
use Rbac\Model\RbacRepositoryInterface;
use Rbac\Service\AuthAdapter;
use Laminas\Authentication\AuthenticationService;
use Laminas\Mvc\Controller\AbstractActionController;
use Laminas\Stdlib\RequestInterface as Request;
use Laminas\Stdlib\ResponseInterface as Response;
use Laminas\View\Model\ViewModel;
use Laminas\Session\Container;
class IndexController extends AbstractActionController{

    protected $authAdapter;
    protected $sessionContainer;
    protected  $authenticationService;
    //public function __construct(AuthAdapter $authAdapter , Container $sessionContainer ) {
    public function __construct(AuthenticationService $authenticationService  , Container $sessionContainer ) {
        $this->authenticationService = $authenticationService;
        $this->sessionContainer = $sessionContainer;
        $this->authAdapter = $this->authenticationService->getAdapter();
        //$this->sessionContainer = $this->authenticationService->getStorage();
    }

    /*
    public function dispatch(Request $request, Response $response = null)
    {
        return parent::dispatch($request, $response); // TODO: Change the autogenerated stub
    }
    */


    public function indexAction(){
        //$this->layout()->setTemplate('layout/rbac');
        $view =  new ViewModel();
        return $view;
    }

    public function aksesAction(){
        //$this->layout()->setTemplate('layout/rbac');
        $view =  new ViewModel();
        return $view;
    }

    public function loginAction()
    {
        $view =  new ViewModel();
        //$this->layout()->setTemplate('layout/rbac');
        $view->setTerminal(true);
        return $view;
    }

    public function logoutAction()
    {
        $this->sessionContainer->offsetUnset('user');
        $view =  new ViewModel();
        $view->setTerminal(true);
        return $this->redirect()->toRoute('login');
    }

    public function authenticateAction(){

        $response = [
            'error' => 1,
            'messages' => 'Error'];

        $email = $this->params()->fromPost('inputEmail', 'default_val');
        $password = $this->params()->fromPost('inputPassword', 'default_val');

        //$bcrypt = new \Bcrypt();
        $passwordHash = password_hash($password,PASSWORD_BCRYPT );

        $this->authAdapter->setEmail($email);
        $this->authAdapter->setPassword($password);
        $authResult =  $this->authAdapter->authenticate();


        if($authResult->isValid()){
            $this->sessionContainer->offsetSet('user',$this->authAdapter->getUser());
            //$this->sessionContainer->offsetExists('user');
        }
        //print_r($authResult);exit();

        $response['error'] = $authResult->isValid() ? 0 : 1 ;
        $response['messages'] = $authResult->getMessages();
        //$response['data'] =(array)($authResult);
        //$response['hash'] = $passwordHash;
        $cookie_name = "user";
        $cookie_value = "John Doe";
        setcookie($cookie_name, $cookie_value, time() + (86400 * 30), "/"); // 86400 = 1 day
        header("Content-type:application/json");
        echo json_encode(  $response );
        exit();
    }

    /**
     * Displays the "Not Authorized" page.
     */
    public function notAuthorizedAction()
    {
        $this->getResponse()->setStatusCode(403);

        return new ViewModel();
    }
}
